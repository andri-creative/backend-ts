// ================= DATASOURCE & GENERATOR =================
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//
// ======================== USER TEAM & PROFILE ========================
//
model UserTeam {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String?
  email    String  @unique
  password String
  otp      String?
  isActive Boolean @default(false)

  profile ProfilTeam?

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  PasswordResetToken PasswordResetToken[]
}

model ProfilTeam {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  foto            String?
  bio             String?
  tahun           Int?
  locationEdikasi String?
  phone           String?
  lokasiUser      String?
  degree          String?

  userTeamId String   @unique @db.ObjectId
  userTeam   UserTeam @relation(fields: [userTeamId], references: [id])

  roles ProfilTeamRoles[]

  tools ProfilTeamTools[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProfilTeamRoles {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  profilTeamId String @db.ObjectId
  roleId       String @db.ObjectId

  profilTeam ProfilTeam @relation(fields: [profilTeamId], references: [id], onDelete: Cascade)
  role       Roles      @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([profilTeamId, roleId])
}

model ProfilTeamTools {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  profilTeamId String @db.ObjectId
  toolsId      String @db.ObjectId

  profilTeam ProfilTeam @relation(fields: [profilTeamId], references: [id])
  tools      Tools      @relation(fields: [toolsId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  user      UserTeam @relation(fields: [userId], references: [id])
  otp       String
  expiredAt DateTime
}

//
// ==================== Blacklisted Token ================
//
model BlacklistedToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt])
}

//
// ======================== USER ADMIN & PROFILE ========================
//
model UserAdmin {
  id       String       @id @default(auto()) @map("_id") @db.ObjectId
  email    String       @unique
  password String
  username String
  profile  ProfilAdmin?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProfilAdmin {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  phone     String?
  bio       String?
  greeting  String?
  location  String?
  workyType String?
  title     String?
  icons     String?

  userAdminId String    @unique @db.ObjectId
  userAdmin   UserAdmin @relation(fields: [userAdminId], references: [id])

  profilTeamId String? @db.ObjectId
  // profilTeam   ProfilTeam? @relation(fields: [profilTeamId], references: [id])

  // educations Education[]
  // projects Project[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//
// ======================== TOOLS ========================
//
model Tools {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  title String
  image String?
  url   String?

  teamTools    ProfilTeamTools[]
  projectTools ProjectTools[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Roles {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String

  teamRoles ProfilTeamRoles[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model ProfilTeamTools {
//   id           String @id @default(auto()) @map("_id") @db.ObjectId
//   profilTeamId String @db.ObjectId
//   toolsId      String @db.ObjectId

//   profilTeam ProfilTeam @relation(fields: [profilTeamId], references: [id])
//   tools      Tools      @relation(fields: [toolsId], references: [id])

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

//
// ======================== PROJECT ========================
//
model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  image       String?
  status      Boolean  @default(false)
  techStack   String[]
  role        String?
  demoUrl     String?
  repoUrl     String?
  features    String[]

  tools ProjectTools[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectTools {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  toolsId   String @db.ObjectId
  projectId String @db.ObjectId

  tools   Tools   @relation(fields: [toolsId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ======================== TOKEN BLACKLIST ========================
model TokenBlacklist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  createdAt DateTime @default(now())
}

// ======================== Experience ========================
model Experience {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  companyLogo      String
  title            String
  company          String
  location         String
  period           String
  duration         String
  type             String
  mode             String
  responsibilities String[]
}

// ======================== Achievement ========================
enum Category {
  sertifikat
  penghargaan
  lainnya
}

enum Level {
  beginner
  intermediate
  advanced
}

enum UploadStatus {
  pending
  completed
  failed
  no_file
}

model Achievement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  src         String   @default("")
  issuer      String
  label       String
  issueDate   String
  description String
  category    Category
  level       Level
  tags        String[]

  status Boolean @default(true)

  uploadStatus UploadStatus @default(no_file)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ======================== Album ========================
model MyAlbum {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  width     Int?
  height    Int?
  url       String
  publicId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ======================== Ranting ========================
model Ranting {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  label     String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ================= Team =============
